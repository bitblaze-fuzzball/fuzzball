module V = Vine

open Exec_utils
open Exec_exceptions
open Exec_options
open Fragment_machine

let syscalls_x86 =
  [|
    (0, "restart_syscall");        (*   0 *)
    (1, "_exit");                  (*   1 *)
    (0, "fork");                   (*   2 *)
    (3, "read");                   (*   3 *)
    (3, "write");                  (*   4 *)
    (3, "open");                   (*   5 *)
    (1, "close");                  (*   6 *)
    (3, "waitpid");                (*   7 *)
    (2, "creat");                  (*   8 *)
    (2, "link");                   (*   9 *)
    (1, "unlink");                 (*  10 *)
    (3, "execve");                 (*  11 *)
    (1, "chdir");                  (*  12 *)
    (1, "time");                   (*  13 *)
    (3, "mknod");                  (*  14 *)
    (2, "chmod");                  (*  15 *)
    (3, "lchown");                 (*  16 *)
    (0, "break");                  (*  17 *)
    (2, "oldstat");                (*  18 *)
    (3, "lseek");                  (*  19 *)
    (0, "getpid");                 (*  20 *)
    (5, "mount");                  (*  21 *)
    (1, "oldumount");              (*  22 *)
    (1, "setuid");                 (*  23 *)
    (0, "getuid");                 (*  24 *)
    (1, "stime");                  (*  25 *)
    (4, "ptrace");                 (*  26 *)
    (1, "alarm");                  (*  27 *)
    (2, "oldfstat");               (*  28 *)
    (0, "pause");                  (*  29 *)
    (2, "utime");                  (*  30 *)
    (2, "stty");                   (*  31 *)
    (2, "gtty");                   (*  32 *)
    (2, "access");                 (*  33 *)
    (1, "nice");                   (*  34 *)
    (0, "ftime");                  (*  35 *)
    (0, "sync");                   (*  36 *)
    (2, "kill");                   (*  37 *)
    (2, "rename");                 (*  38 *)
    (2, "mkdir");                  (*  39 *)
    (1, "rmdir");                  (*  40 *)
    (1, "dup");                    (*  41 *)
    (1, "pipe");                   (*  42 *)
    (1, "times");                  (*  43 *)
    (0, "prof");                   (*  44 *)
    (1, "brk");                    (*  45 *)
    (1, "setgid");                 (*  46 *)
    (0, "getgid");                 (*  47 *)
    (3, "signal");                 (*  48 *)
    (0, "geteuid");                (*  49 *)
    (0, "getegid");                (*  50 *)
    (1, "acct");                   (*  51 *)
    (2, "umount");                 (*  52 *)
    (0, "lock");                   (*  53 *)
    (3, "ioctl");                  (*  54 *)
    (3, "fcntl");                  (*  55 *)
    (0, "mpx");                    (*  56 *)
    (2, "setpgid");                (*  57 *)
    (2, "ulimit");                 (*  58 *)
    (1, "oldolduname");            (*  59 *)
    (1, "umask");                  (*  60 *)
    (1, "chroot");                 (*  61 *)
    (2, "ustat");                  (*  62 *)
    (2, "dup2");                   (*  63 *)
    (0, "getppid");                (*  64 *)
    (0, "getpgrp");                (*  65 *)
    (0, "setsid");                 (*  66 *)
    (3, "sigaction");              (*  67 *)
    (0, "sgetmask");               (*  68 *)
    (1, "ssetmask");               (*  69 *)
    (2, "setreuid");               (*  70 *)
    (2, "setregid");               (*  71 *)
    (3, "sigsuspend");             (*  72 *)
    (1, "sigpending");             (*  73 *)
    (2, "sethostname");            (*  74 *)
    (2, "setrlimit");              (*  75 *)
    (2, "old_getrlimit");          (*  76 *)
    (2, "getrusage");              (*  77 *)
    (2, "gettimeofday");           (*  78 *)
    (2, "settimeofday");           (*  79 *)
    (2, "getgroups");              (*  80 *)
    (2, "setgroups");              (*  81 *)
    (1, "oldselect");              (*  82 *)
    (2, "symlink");                (*  83 *)
    (2, "oldlstat");               (*  84 *)
    (3, "readlink");               (*  85 *)
    (1, "uselib");                 (*  86 *)
    (2, "swapon");                 (*  87 *)
    (4, "reboot");                 (*  88 *)
    (3, "readdir");                (*  89 *)
    (6, "old_mmap");               (*  90 *)
    (2, "munmap");                 (*  91 *)
    (2, "truncate");               (*  92 *)
    (2, "ftruncate");              (*  93 *)
    (2, "fchmod");                 (*  94 *)
    (3, "fchown");                 (*  95 *)
    (2, "getpriority");            (*  96 *)
    (3, "setpriority");            (*  97 *)
    (4, "profil");                 (*  98 *)
    (2, "statfs");                 (*  99 *)
    (2, "fstatfs");                (* 100 *)
    (3, "ioperm");                 (* 101 *)
    (2, "socketcall");             (* 102 *)
    (3, "syslog");                 (* 103 *)
    (3, "setitimer");              (* 104 *)
    (2, "getitimer");              (* 105 *)
    (2, "stat");                   (* 106 *)
    (2, "lstat");                  (* 107 *)
    (2, "fstat");                  (* 108 *)
    (1, "olduname");               (* 109 *)
    (1, "iopl");                   (* 110 *)
    (0, "vhangup");                (* 111 *)
    (0, "idle");                   (* 112 *)
    (1, "vm86old");                (* 113 *)
    (4, "wait4");                  (* 114 *)
    (1, "swapoff");                (* 115 *)
    (1, "sysinfo");                (* 116 *)
    (6, "ipc");                    (* 117 *)
    (1, "fsync");                  (* 118 *)
    (0, "sigreturn");              (* 119 *)
    (5, "clone");                  (* 120 *)
    (2, "setdomainname");          (* 121 *)
    (1, "uname");                  (* 122 *)
    (3, "modify_ldt");             (* 123 *)
    (1, "adjtimex");               (* 124 *)
    (3, "mprotect");               (* 125 *)
    (3, "sigprocmask");            (* 126 *)
    (2, "create_module");          (* 127 *)
    (3, "init_module");            (* 128 *)
    (2, "delete_module");          (* 129 *)
    (1, "get_kernel_syms");        (* 130 *)
    (4, "quotactl");               (* 131 *)
    (1, "getpgid");                (* 132 *)
    (1, "fchdir");                 (* 133 *)
    (0, "bdflush");                (* 134 *)
    (3, "sysfs");                  (* 135 *)
    (1, "personality");            (* 136 *)
    (5, "afs_syscall");            (* 137 *)
    (1, "setfsuid");               (* 138 *)
    (1, "setfsgid");               (* 139 *)
    (5, "_llseek");                (* 140 *)
    (3, "getdents");               (* 141 *)
    (5, "select");                 (* 142 *)
    (2, "flock");                  (* 143 *)
    (3, "msync");                  (* 144 *)
    (3, "readv");                  (* 145 *)
    (3, "writev");                 (* 146 *)
    (1, "getsid");                 (* 147 *)
    (1, "fdatasync");              (* 148 *)
    (1, "_sysctl");                (* 149 *)
    (2, "mlock");                  (* 150 *)
    (2, "munlock");                (* 151 *)
    (1, "mlockall");               (* 152 *)
    (0, "munlockall");             (* 153 *)
    (0, "sched_setparam");         (* 154 *)
    (2, "sched_getparam");         (* 155 *)
    (3, "sched_setscheduler");     (* 156 *)
    (1, "sched_getscheduler");     (* 157 *)
    (0, "sched_yield");            (* 158 *)
    (1, "sched_get_priority_max"); (* 159 *)
    (1, "sched_get_priority_min"); (* 160 *)
    (2, "sched_rr_get_interval");  (* 161 *)
    (2, "nanosleep");              (* 162 *)
    (5, "mremap");                 (* 163 *)
    (3, "setresuid");              (* 164 *)
    (3, "getresuid");              (* 165 *)
    (5, "vm86");                   (* 166 *)
    (5, "query_module");           (* 167 *)
    (3, "poll");                   (* 168 *)
    (3, "nfsservctl");             (* 169 *)
    (3, "setresgid");              (* 170 *)
    (3, "getresgid");              (* 171 *)
    (5, "prctl");                  (* 172 *)
    (0, "rt_sigreturn");           (* 173 *)
    (4, "rt_sigaction");           (* 174 *)
    (4, "rt_sigprocmask");         (* 175 *)
    (2, "rt_sigpending");          (* 176 *)
    (4, "rt_sigtimedwait");        (* 177 *)
    (3, "rt_sigqueueinfo");        (* 178 *)
    (2, "rt_sigsuspend");          (* 179 *)
    (5, "pread64");                (* 180 *)
    (5, "pwrite64");               (* 181 *)
    (3, "chown");                  (* 182 *)
    (2, "getcwd");                 (* 183 *)
    (2, "capget");                 (* 184 *)
    (2, "capset");                 (* 185 *)
    (2, "sigaltstack");            (* 186 *)
    (4, "sendfile");               (* 187 *)
    (5, "getpmsg");                (* 188 *)
    (5, "putpmsg");                (* 189 *)
    (0, "vfork");                  (* 190 *)
    (2, "getrlimit");              (* 191 *)
    (6, "mmap2");                  (* 192 *)
    (3, "truncate64");             (* 193 *)
    (3, "ftruncate64");            (* 194 *)
    (2, "stat64");                 (* 195 *)
    (2, "lstat64");                (* 196 *)
    (2, "fstat64");                (* 197 *)
    (3, "lchown32");               (* 198 *)
    (0, "getuid32");               (* 199 *)
    (0, "getgid32");               (* 200 *)
    (0, "geteuid32");              (* 201 *)
    (0, "getegid32");              (* 202 *)
    (2, "setreuid32");             (* 203 *)
    (2, "setregid32");             (* 204 *)
    (2, "getgroups32");            (* 205 *)
    (2, "setgroups32");            (* 206 *)
    (3, "fchown32");               (* 207 *)
    (3, "setresuid32");            (* 208 *)
    (3, "getresuid32");            (* 209 *)
    (3, "setresgid32");            (* 210 *)
    (3, "getresgid32");            (* 211 *)
    (3, "chown32");                (* 212 *)
    (1, "setuid32");               (* 213 *)
    (1, "setgid32");               (* 214 *)
    (1, "setfsuid32");             (* 215 *)
    (1, "setfsgid32");             (* 216 *)
    (2, "pivot_root");             (* 217 *)
    (3, "mincore");                (* 218 *)
    (3, "madvise");                (* 219 *)
    (3, "getdents64");             (* 220 *)
    (3, "fcntl64");                (* 221 *)
    (5, "security");               (* 223 *)
    (0, "gettid");                 (* 224 *)
    (4, "readahead");              (* 225 *)
    (5, "setxattr");               (* 226 *)
    (5, "lsetxattr");              (* 227 *)
    (5, "fsetxattr");              (* 228 *)
    (4, "getxattr");               (* 229 *)
    (4, "lgetxattr");              (* 230 *)
    (4, "fgetxattr");              (* 231 *)
    (3, "listxattr");              (* 232 *)
    (3, "llistxattr");             (* 233 *)
    (3, "flistxattr");             (* 234 *)
    (2, "removexattr");            (* 235 *)
    (2, "lremovexattr");           (* 236 *)
    (2, "fremovexattr");           (* 237 *)
    (2, "tkill");                  (* 238 *)
    (4, "sendfile64");             (* 239 *)
    (6, "futex");                  (* 240 *)
    (3, "sched_setaffinity");      (* 241 *)
    (3, "sched_getaffinity");      (* 242 *)
    (1, "set_thread_area");        (* 243 *)
    (1, "get_thread_area");        (* 244 *)
    (2, "io_setup");               (* 245 *)
    (1, "io_destroy");             (* 246 *)
    (5, "io_getevents");           (* 247 *)
    (3, "io_submit");              (* 248 *)
    (3, "io_cancel");              (* 249 *)
    (5, "fadvise64");              (* 250 *)
    (1, "exit_group");             (* 252 *)
    (4, "lookup_dcookie");         (* 253 *)
    (1, "epoll_create");           (* 254 *)
    (4, "epoll_ctl");              (* 255 *)
    (4, "epoll_wait");             (* 256 *)
    (5, "remap_file_pages");       (* 257 *)
    (1, "set_tid_address");        (* 258 *)
    (3, "timer_create");           (* 259 *)
    (4, "timer_settime");          (* 260 *)
    (2, "timer_gettime");          (* 261 *)
    (1, "timer_getoverrun");       (* 262 *)
    (1, "timer_delete");           (* 263 *)
    (2, "clock_settime");          (* 264 *)
    (2, "clock_gettime");          (* 265 *)
    (2, "clock_getres");           (* 266 *)
    (4, "clock_nanosleep");        (* 267 *)
    (3, "statfs64");               (* 268 *)
    (3, "fstatfs64");              (* 269 *)
    (3, "tgkill");                 (* 270 *)
    (2, "utimes");                 (* 271 *)
    (6, "fadvise64_64");           (* 272 *)
    (5, "vserver");                (* 273 *)
    (6, "mbind");                  (* 274 *)
    (5, "get_mempolicy");          (* 275 *)
    (3, "set_mempolicy");          (* 276 *)
    (4, "mq_open");                (* 277 *)
    (1, "mq_unlink");              (* 278 *)
    (5, "mq_timedsend");           (* 279 *)
    (5, "mq_timedreceive");        (* 280 *)
    (2, "mq_notify");              (* 281 *)
    (3, "mq_getsetattr");          (* 282 *)
    (4, "kexec_load");             (* 283 *)
    (5, "waitid");                 (* 284 *)
    (5, "add_key");                (* 286 *)
    (4, "request_key");            (* 287 *)
    (5, "keyctl");                 (* 288 *)
    (3, "ioprio_set");             (* 289 *)
    (2, "ioprio_get");             (* 290 *)
    (0, "inotify_init");           (* 291 *)
    (3, "inotify_add_watch");      (* 292 *)
    (2, "inotify_rm_watch");       (* 293 *)
    (4, "migrate_pages");          (* 294 *)
    (4, "openat");                 (* 295 *)
    (3, "mkdirat");                (* 296 *)
    (4, "mknodat");                (* 297 *)
    (5, "fchownat");               (* 298 *)
    (3, "futimesat");              (* 299 *)
    (4, "fstatat64");              (* 300 *)
    (3, "unlinkat");               (* 301 *)
    (4, "renameat");               (* 302 *)
    (5, "linkat");                 (* 303 *)
    (3, "symlinkat");              (* 304 *)
    (4, "readlinkat");             (* 305 *)
    (3, "fchmodat");               (* 306 *)
    (3, "faccessat");              (* 307 *)
    (6, "pselect6");               (* 308 *)
    (5, "ppoll");                  (* 309 *)
    (1, "unshare");                (* 310 *)
    (2, "set_robust_list");        (* 311 *)
    (3, "get_robust_list");        (* 312 *)
    (6, "splice");                 (* 313 *)
    (6, "sync_file_range");        (* 314 *)
    (4, "tee");                    (* 315 *)
    (4, "vmsplice");               (* 316 *)
    (6, "move_pages");             (* 317 *)
    (3, "getcpu");                 (* 318 *)
    (6, "epoll_pwait");            (* 319 *)
    (4, "utimensat");              (* 320 *)
    (3, "signalfd");               (* 321 *)
    (2, "timerfd_create");         (* 322 *)
    (1, "eventfd");                (* 323 *)
    (6, "fallocate");              (* 324 *)
    (4, "timerfd_settime");        (* 325 *)
    (2, "timerfd_gettime");        (* 326 *)
    (4, "signalfd4");              (* 327 *)
    (2, "eventfd2");               (* 328 *)
    (1, "epoll_create1");          (* 329 *)
    (3, "dup3");                   (* 330 *)
    (2, "pipe2");                  (* 331 *)
    (1, "inotify_init1");          (* 332 *)
    (5, "preadv");                 (* 333 *)
    (5, "pwritev");                (* 334 *)
    (4, "rt_tgsigqueueinfo");      (* 335 *)
    (5, "perf_event_open");        (* 336 *)
    (5, "recvmmsg");               (* 337 *)
    (2, "fanotify_init");          (* 338 *)
    (5, "fanotify_mark");          (* 339 *)
    (4, "prlimit64");              (* 340 *)
    (5, "name_to_handle_at");      (* 341 *)
    (3, "open_by_handle_at");      (* 342 *)
    (2, "clock_adjtime");          (* 343 *)
    (1, "syncfs");                 (* 344 *)
    (4, "sendmmsg");               (* 345 *)
    (2, "setns");                  (* 346 *)
    (6, "process_vm_readv");       (* 347 *)
    (6, "process_vm_writev");      (* 348 *)
    (5, "kcmp");                   (* 349 *)
    (3, "finit_module");           (* 350 *)
  |]

let syscalls_x64 =
  [|
    (3, "read");                   (*   0 *)
    (3, "write");                  (*   1 *)
    (3, "open");                   (*   2 *)
    (1, "close");                  (*   3 *)
    (2, "stat");                   (*   4 *)
    (2, "fstat");                  (*   5 *)
    (2, "lstat");                  (*   6 *)
    (3, "poll");                   (*   7 *)
    (3, "lseek");                  (*   8 *)
    (6, "mmap");                   (*   9 *)
    (3, "mprotect");               (*  10 *)
    (2, "munmap");                 (*  11 *)
    (1, "brk");                    (*  12 *)
    (4, "rt_sigaction");           (*  13 *)
    (4, "rt_sigprocmask");         (*  14 *)
    (0, "rt_sigreturn");           (*  15 *)
    (3, "ioctl");                  (*  16 *)
    (4, "pread");                  (*  17 *)
    (4, "pwrite");                 (*  18 *)
    (3, "readv");                  (*  19 *)
    (3, "writev");                 (*  20 *)
    (2, "access");                 (*  21 *)
    (1, "pipe");                   (*  22 *)
    (5, "select");                 (*  23 *)
    (0, "sched_yield");            (*  24 *)
    (5, "mremap");                 (*  25 *)
    (3, "msync");                  (*  26 *)
    (3, "mincore");                (*  27 *)
    (3, "madvise");                (*  28 *)
    (4, "shmget");                 (*  29 *)
    (4, "shmat");                  (*  30 *)
    (4, "shmctl");                 (*  31 *)
    (1, "dup");                    (*  32 *)
    (2, "dup2");                   (*  33 *)
    (0, "pause");                  (*  34 *)
    (2, "nanosleep");              (*  35 *)
    (2, "getitimer");              (*  36 *)
    (1, "alarm");                  (*  37 *)
    (3, "setitimer");              (*  38 *)
    (0, "getpid");                 (*  39 *)
    (4, "sendfile");               (*  40 *)
    (3, "socket");                 (*  41 *)
    (3, "connect");                (*  42 *)
    (3, "accept");                 (*  43 *)
    (6, "sendto");                 (*  44 *)
    (6, "recvfrom");               (*  45 *)
    (3, "sendmsg");                (*  46 *)
    (3, "recvmsg");                (*  47 *)
    (2, "shutdown");               (*  48 *)
    (3, "bind");                   (*  49 *)
    (2, "listen");                 (*  50 *)
    (3, "getsockname");            (*  51 *)
    (3, "getpeername");            (*  52 *)
    (4, "socketpair");             (*  53 *)
    (5, "setsockopt");             (*  54 *)
    (5, "getsockopt");             (*  55 *)
    (5, "clone");                  (*  56 *)
    (0, "fork");                   (*  57 *)
    (0, "vfork");                  (*  58 *)
    (3, "execve");                 (*  59 *)
    (1, "_exit");                  (*  60 *)
    (4, "wait4");                  (*  61 *)
    (2, "kill");                   (*  62 *)
    (1, "uname");                  (*  63 *)
    (4, "semget");                 (*  64 *)
    (4, "semop");                  (*  65 *)
    (4, "semctl");                 (*  66 *)
    (4, "shmdt");                  (*  67 *)
    (4, "msgget");                 (*  68 *)
    (4, "msgsnd");                 (*  69 *)
    (5, "msgrcv");                 (*  70 *)
    (3, "msgctl");                 (*  71 *)
    (3, "fcntl");                  (*  72 *)
    (2, "flock");                  (*  73 *)
    (1, "fsync");                  (*  74 *)
    (1, "fdatasync");              (*  75 *)
    (2, "truncate");               (*  76 *)
    (2, "ftruncate");              (*  77 *)
    (3, "getdents");               (*  78 *)
    (2, "getcwd");                 (*  79 *)
    (1, "chdir");                  (*  80 *)
    (1, "fchdir");                 (*  81 *)
    (2, "rename");                 (*  82 *)
    (2, "mkdir");                  (*  83 *)
    (1, "rmdir");                  (*  84 *)
    (2, "creat");                  (*  85 *)
    (2, "link");                   (*  86 *)
    (1, "unlink");                 (*  87 *)
    (2, "symlink");                (*  88 *)
    (3, "readlink");               (*  89 *)
    (2, "chmod");                  (*  90 *)
    (2, "fchmod");                 (*  91 *)
    (3, "chown");                  (*  92 *)
    (3, "fchown");                 (*  93 *)
    (3, "lchown");                 (*  94 *)
    (1, "umask");                  (*  95 *)
    (2, "gettimeofday");           (*  96 *)
    (2, "getrlimit");              (*  97 *)
    (2, "getrusage");              (*  98 *)
    (1, "sysinfo");                (*  99 *)
    (1, "times");                  (* 100 *)
    (4, "ptrace");                 (* 101 *)
    (0, "getuid");                 (* 102 *)
    (3, "syslog");                 (* 103 *)
    (0, "getgid");                 (* 104 *)
    (1, "setuid");                 (* 105 *)
    (1, "setgid");                 (* 106 *)
    (0, "geteuid");                (* 107 *)
    (0, "getegid");                (* 108 *)
    (2, "setpgid");                (* 109 *)
    (0, "getppid");                (* 110 *)
    (0, "getpgrp");                (* 111 *)
    (0, "setsid");                 (* 112 *)
    (2, "setreuid");               (* 113 *)
    (2, "setregid");               (* 114 *)
    (2, "getgroups");              (* 115 *)
    (2, "setgroups");              (* 116 *)
    (3, "setresuid");              (* 117 *)
    (3, "getresuid");              (* 118 *)
    (3, "setresgid");              (* 119 *)
    (3, "getresgid");              (* 120 *)
    (1, "getpgid");                (* 121 *)
    (1, "setfsuid");               (* 122 *)
    (1, "setfsgid");               (* 123 *)
    (1, "getsid");                 (* 124 *)
    (2, "capget");                 (* 125 *)
    (2, "capset");                 (* 126 *)
    (2, "rt_sigpending");          (* 127 *)
    (4, "rt_sigtimedwait");        (* 128 *)
    (3, "rt_sigqueueinfo");        (* 129 *)
    (2, "rt_sigsuspend");          (* 130 *)
    (2, "sigaltstack");            (* 131 *)
    (2, "utime");                  (* 132 *)
    (3, "mknod");                  (* 133 *)
    (1, "uselib");                 (* 134 *)
    (1, "personality");            (* 135 *)
    (2, "ustat");                  (* 136 *)
    (2, "statfs");                 (* 137 *)
    (2, "fstatfs");                (* 138 *)
    (3, "sysfs");                  (* 139 *)
    (2, "getpriority");            (* 140 *)
    (3, "setpriority");            (* 141 *)
    (0, "sched_setparam");         (* 142 *)
    (2, "sched_getparam");         (* 143 *)
    (3, "sched_setscheduler");     (* 144 *)
    (1, "sched_getscheduler");     (* 145 *)
    (1, "sched_get_priority_max"); (* 146 *)
    (1, "sched_get_priority_min"); (* 147 *)
    (2, "sched_rr_get_interval");  (* 148 *)
    (2, "mlock");                  (* 149 *)
    (2, "munlock");                (* 150 *)
    (1, "mlockall");               (* 151 *)
    (0, "munlockall");             (* 152 *)
    (0, "vhangup");                (* 153 *)
    (3, "modify_ldt");             (* 154 *)
    (2, "pivot_root");             (* 155 *)
    (1, "_sysctl");                (* 156 *)
    (5, "prctl");                  (* 157 *)
    (2, "arch_prctl");             (* 158 *)
    (1, "adjtimex");               (* 159 *)
    (2, "setrlimit");              (* 160 *)
    (1, "chroot");                 (* 161 *)
    (0, "sync");                   (* 162 *)
    (1, "acct");                   (* 163 *)
    (2, "settimeofday");           (* 164 *)
    (5, "mount");                  (* 165 *)
    (2, "umount");                 (* 166 *)
    (2, "swapon");                 (* 167 *)
    (1, "swapoff");                (* 168 *)
    (4, "reboot");                 (* 169 *)
    (2, "sethostname");            (* 170 *)
    (2, "setdomainname");          (* 171 *)
    (1, "iopl");                   (* 172 *)
    (3, "ioperm");                 (* 173 *)
    (2, "create_module");          (* 174 *)
    (3, "init_module");            (* 175 *)
    (2, "delete_module");          (* 176 *)
    (1, "get_kernel_syms");        (* 177 *)
    (5, "query_module");           (* 178 *)
    (4, "quotactl");               (* 179 *)
    (3, "nfsservctl");             (* 180 *)
    (5, "getpmsg");                (* 181 *)
    (5, "putpmsg");                (* 182 *)
    (5, "afs_syscall");            (* 183 *)
    (3, "tuxcall");                (* 184 *)
    (3, "security");               (* 185 *)
    (0, "gettid");                 (* 186 *)
    (3, "readahead");              (* 187 *)
    (5, "setxattr");               (* 188 *)
    (5, "lsetxattr");              (* 189 *)
    (5, "fsetxattr");              (* 190 *)
    (4, "getxattr");               (* 191 *)
    (4, "lgetxattr");              (* 192 *)
    (4, "fgetxattr");              (* 193 *)
    (3, "listxattr");              (* 194 *)
    (3, "llistxattr");             (* 195 *)
    (3, "flistxattr");             (* 196 *)
    (2, "removexattr");            (* 197 *)
    (2, "lremovexattr");           (* 198 *)
    (2, "fremovexattr");           (* 199 *)
    (2, "tkill");                  (* 200 *)
    (1, "time");                   (* 201 *)
    (6, "futex");                  (* 202 *)
    (3, "sched_setaffinity");      (* 203 *)
    (3, "sched_getaffinity");      (* 204 *)
    (1, "set_thread_area");        (* 205 *)
    (2, "io_setup");               (* 206 *)
    (1, "io_destroy");             (* 207 *)
    (5, "io_getevents");           (* 208 *)
    (3, "io_submit");              (* 209 *)
    (3, "io_cancel");              (* 210 *)
    (1, "get_thread_area");        (* 211 *)
    (3, "lookup_dcookie");         (* 212 *)
    (1, "epoll_create");           (* 213 *)
    (4, "epoll_ctl_old");          (* 214 *)
    (4, "epoll_wait_old");         (* 215 *)
    (5, "remap_file_pages");       (* 216 *)
    (3, "getdents64");             (* 217 *)
    (1, "set_tid_address");        (* 218 *)
    (0, "restart_syscall");        (* 219 *)
    (5, "semtimedop");             (* 220 *)
    (4, "fadvise64");              (* 221 *)
    (3, "timer_create");           (* 222 *)
    (4, "timer_settime");          (* 223 *)
    (2, "timer_gettime");          (* 224 *)
    (1, "timer_getoverrun");       (* 225 *)
    (1, "timer_delete");           (* 226 *)
    (2, "clock_settime");          (* 227 *)
    (2, "clock_gettime");          (* 228 *)
    (2, "clock_getres");           (* 229 *)
    (4, "clock_nanosleep");        (* 230 *)
    (1, "exit_group");             (* 231 *)
    (4, "epoll_wait");             (* 232 *)
    (4, "epoll_ctl");              (* 233 *)
    (3, "tgkill");                 (* 234 *)
    (2, "utimes");                 (* 235 *)
    (5, "vserver");                (* 236 *)
    (6, "mbind");                  (* 237 *)
    (3, "set_mempolicy");          (* 238 *)
    (5, "get_mempolicy");          (* 239 *)
    (4, "mq_open");                (* 240 *)
    (1, "mq_unlink");              (* 241 *)
    (5, "mq_timedsend");           (* 242 *)
    (5, "mq_timedreceive");        (* 243 *)
    (2, "mq_notify");              (* 244 *)
    (3, "mq_getsetattr");          (* 245 *)
    (4, "kexec_load");             (* 246 *)
    (5, "waitid");                 (* 247 *)
    (5, "add_key");                (* 248 *)
    (4, "request_key");            (* 249 *)
    (5, "keyctl");                 (* 250 *)
    (3, "ioprio_set");             (* 251 *)
    (2, "ioprio_get");             (* 252 *)
    (0, "inotify_init");           (* 253 *)
    (3, "inotify_add_watch");      (* 254 *)
    (2, "inotify_rm_watch");       (* 255 *)
    (4, "migrate_pages");          (* 256 *)
    (4, "openat");                 (* 257 *)
    (3, "mkdirat");                (* 258 *)
    (4, "mknodat");                (* 259 *)
    (5, "fchownat");               (* 260 *)
    (3, "futimesat");              (* 261 *)
    (4, "newfstatat");             (* 262 *)
    (3, "unlinkat");               (* 263 *)
    (4, "renameat");               (* 264 *)
    (5, "linkat");                 (* 265 *)
    (3, "symlinkat");              (* 266 *)
    (4, "readlinkat");             (* 267 *)
    (3, "fchmodat");               (* 268 *)
    (3, "faccessat");              (* 269 *)
    (6, "pselect6");               (* 270 *)
    (5, "ppoll");                  (* 271 *)
    (1, "unshare");                (* 272 *)
    (2, "set_robust_list");        (* 273 *)
    (3, "get_robust_list");        (* 274 *)
    (6, "splice");                 (* 275 *)
    (4, "tee");                    (* 276 *)
    (4, "sync_file_range");        (* 277 *)
    (4, "vmsplice");               (* 278 *)
    (6, "move_pages");             (* 279 *)
    (4, "utimensat");              (* 280 *)
    (6, "epoll_pwait");            (* 281 *)
    (3, "signalfd");               (* 282 *)
    (2, "timerfd_create");         (* 283 *)
    (1, "eventfd");                (* 284 *)
    (4, "fallocate");              (* 285 *)
    (4, "timerfd_settime");        (* 286 *)
    (2, "timerfd_gettime");        (* 287 *)
    (4, "accept4");                (* 288 *)
    (4, "signalfd4");              (* 289 *)
    (2, "eventfd2");               (* 290 *)
    (1, "epoll_create1");          (* 291 *)
    (3, "dup3");                   (* 292 *)
    (2, "pipe2");                  (* 293 *)
    (1, "inotify_init1");          (* 294 *)
    (4, "preadv");                 (* 295 *)
    (4, "pwritev");                (* 296 *)
    (4, "rt_tgsigqueueinfo");      (* 297 *)
    (5, "perf_event_open");        (* 298 *)
    (5, "recvmmsg");               (* 299 *)
    (2, "fanotify_init");          (* 300 *)
    (5, "fanotify_mark");          (* 301 *)
    (4, "prlimit64");              (* 302 *)
    (5, "name_to_handle_at");      (* 303 *)
    (3, "open_by_handle_at");      (* 304 *)
    (2, "clock_adjtime");          (* 305 *)
    (1, "syncfs");                 (* 306 *)
    (4, "sendmmsg");               (* 307 *)
    (2, "setns");                  (* 308 *)
    (3, "getcpu");                 (* 309 *)
    (6, "process_vm_readv");       (* 310 *)
    (6, "process_vm_writev");      (* 311 *)
    (5, "kcmp");                   (* 312 *)
    (3, "finit_module");           (* 313 *)
  |]

let syscalls_arm =
  [|
    (0, "restart_syscall");        (*   0 *)
    (1, "exit");                   (*   1 *)
    (0, "fork");                   (*   2 *)
    (3, "read");                   (*   3 *)
    (3, "write");                  (*   4 *)
    (3, "open");                   (*   5 *)
    (1, "close");                  (*   6 *)
    (3, "waitpid");                (*   7 *)
    (2, "creat");                  (*   8 *)
    (2, "link");                   (*   9 *)
    (1, "unlink");                 (*  10 *)
    (3, "execve");                 (*  11 *)
    (1, "chdir");                  (*  12 *)
    (1, "time");                   (*  13 *)
    (3, "mknod");                  (*  14 *)
    (2, "chmod");                  (*  15 *)
    (3, "lchown");                 (*  16 *)
    (0, "break");                  (*  17 *)
    (2, "oldstat");                (*  18 *)
    (3, "lseek");                  (*  19 *)
    (0, "getpid");                 (*  20 *)
    (5, "mount");                  (*  21 *)
    (1, "oldumount");              (*  22 *)
    (1, "setuid");                 (*  23 *)
    (0, "getuid");                 (*  24 *)
    (1, "stime");                  (*  25 *)
    (4, "ptrace");                 (*  26 *)
    (1, "alarm");                  (*  27 *)
    (2, "oldfstat");               (*  28 *)
    (0, "pause");                  (*  29 *)
    (2, "utime");                  (*  30 *)
    (2, "stty");                   (*  31 *)
    (2, "gtty");                   (*  32 *)
    (2, "access");                 (*  33 *)
    (1, "nice");                   (*  34 *)
    (0, "ftime");                  (*  35 *)
    (0, "sync");                   (*  36 *)
    (2, "kill");                   (*  37 *)
    (2, "rename");                 (*  38 *)
    (2, "mkdir");                  (*  39 *)
    (1, "rmdir");                  (*  40 *)
    (1, "dup");                    (*  41 *)
    (1, "pipe");                   (*  42 *)
    (1, "times");                  (*  43 *)
    (0, "prof");                   (*  44 *)
    (1, "brk");                    (*  45 *)
    (1, "setgid");                 (*  46 *)
    (0, "getgid");                 (*  47 *)
    (3, "signal");                 (*  48 *)
    (0, "geteuid");                (*  49 *)
    (0, "getegid");                (*  50 *)
    (1, "acct");                   (*  51 *)
    (2, "umount");                 (*  52 *)
    (0, "lock");                   (*  53 *)
    (3, "ioctl");                  (*  54 *)
    (3, "fcntl");                  (*  55 *)
    (0, "mpx");                    (*  56 *)
    (2, "setpgid");                (*  57 *)
    (2, "ulimit");                 (*  58 *)
    (1, "oldolduname");            (*  59 *)
    (1, "umask");                  (*  60 *)
    (1, "chroot");                 (*  61 *)
    (2, "ustat");                  (*  62 *)
    (2, "dup2");                   (*  63 *)
    (0, "getppid");                (*  64 *)
    (0, "getpgrp");                (*  65 *)
    (0, "setsid");                 (*  66 *)
    (3, "sigaction");              (*  67 *)
    (0, "sgetmask");               (*  68 *)
    (1, "ssetmask");               (*  69 *)
    (2, "setreuid");               (*  70 *)
    (2, "setregid");               (*  71 *)
    (3, "sigsuspend");             (*  72 *)
    (1, "sigpending");             (*  73 *)
    (2, "sethostname");            (*  74 *)
    (2, "setrlimit");              (*  75 *)
    (2, "old_getrlimit");          (*  76 *)
    (2, "getrusage");              (*  77 *)
    (2, "gettimeofday");           (*  78 *)
    (2, "settimeofday");           (*  79 *)
    (2, "getgroups");              (*  80 *)
    (2, "setgroups");              (*  81 *)
    (1, "oldselect");              (*  82 *)
    (2, "symlink");                (*  83 *)
    (2, "oldlstat");               (*  84 *)
    (3, "readlink");               (*  85 *)
    (1, "uselib");                 (*  86 *)
    (2, "swapon");                 (*  87 *)
    (4, "reboot");                 (*  88 *)
    (3, "readdir");                (*  89 *)
    (1, "old_mmap");               (*  90 *)
    (2, "munmap");                 (*  91 *)
    (2, "truncate");               (*  92 *)
    (2, "ftruncate");              (*  93 *)
    (2, "fchmod");                 (*  94 *)
    (3, "fchown");                 (*  95 *)
    (2, "getpriority");            (*  96 *)
    (3, "setpriority");            (*  97 *)
    (4, "profil");                 (*  98 *)
    (2, "statfs");                 (*  99 *)
    (2, "fstatfs");                (* 100 *)
    (3, "ioperm");                 (* 101 *)
    (2, "socketcall");             (* 102 *)
    (3, "syslog");                 (* 103 *)
    (3, "setitimer");              (* 104 *)
    (2, "getitimer");              (* 105 *)
    (2, "stat");                   (* 106 *)
    (2, "lstat");                  (* 107 *)
    (2, "fstat");                  (* 108 *)
    (1, "olduname");               (* 109 *)
    (1, "iopl");                   (* 110 *)
    (0, "vhangup");                (* 111 *)
    (0, "idle");                   (* 112 *)
    (5, "syscall");                (* 113 *)
    (4, "wait4");                  (* 114 *)
    (1, "swapoff");                (* 115 *)
    (1, "sysinfo");                (* 116 *)
    (6, "ipc");                    (* 117 *)
    (1, "fsync");                  (* 118 *)
    (0, "sigreturn");              (* 119 *)
    (5, "clone");                  (* 120 *)
    (2, "setdomainname");          (* 121 *)
    (1, "uname");                  (* 122 *)
    (3, "modify_ldt");             (* 123 *)
    (1, "adjtimex");               (* 124 *)
    (3, "mprotect");               (* 125 *)
    (3, "sigprocmask");            (* 126 *)
    (2, "create_module");          (* 127 *)
    (3, "init_module");            (* 128 *)
    (2, "delete_module");          (* 129 *)
    (1, "get_kernel_syms");        (* 130 *)
    (4, "quotactl");               (* 131 *)
    (1, "getpgid");                (* 132 *)
    (1, "fchdir");                 (* 133 *)
    (0, "bdflush");                (* 134 *)
    (3, "sysfs");                  (* 135 *)
    (1, "personality");            (* 136 *)
    (5, "afs_syscall");            (* 137 *)
    (1, "setfsuid");               (* 138 *)
    (1, "setfsgid");               (* 139 *)
    (5, "_llseek");                (* 140 *)
    (3, "getdents");               (* 141 *)
    (5, "select");                 (* 142 *)
    (2, "flock");                  (* 143 *)
    (3, "msync");                  (* 144 *)
    (3, "readv");                  (* 145 *)
    (3, "writev");                 (* 146 *)
    (1, "getsid");                 (* 147 *)
    (1, "fdatasync");              (* 148 *)
    (1, "_sysctl");                (* 149 *)
    (2, "mlock");                  (* 150 *)
    (2, "munlock");                (* 151 *)
    (1, "mlockall");               (* 152 *)
    (0, "munlockall");             (* 153 *)
    (0, "sched_setparam");         (* 154 *)
    (2, "sched_getparam");         (* 155 *)
    (3, "sched_setscheduler");     (* 156 *)
    (1, "sched_getscheduler");     (* 157 *)
    (0, "sched_yield");            (* 158 *)
    (1, "sched_get_priority_max"); (* 159 *)
    (1, "sched_get_priority_min"); (* 160 *)
    (2, "sched_rr_get_interval");  (* 161 *)
    (2, "nanosleep");              (* 162 *)
    (5, "mremap");                 (* 163 *)
    (3, "setresuid");              (* 164 *)
    (3, "getresuid");              (* 165 *)
    (5, "vm86");                   (* 166 *)
    (5, "query_module");           (* 167 *)
    (3, "poll");                   (* 168 *)
    (3, "nfsservctl");             (* 169 *)
    (3, "setresgid");              (* 170 *)
    (3, "getresgid");              (* 171 *)
    (5, "prctl");                  (* 172 *)
    (0, "rt_sigreturn");           (* 173 *)
    (4, "rt_sigaction");           (* 174 *)
    (4, "rt_sigprocmask");         (* 175 *)
    (2, "rt_sigpending");          (* 176 *)
    (4, "rt_sigtimedwait");        (* 177 *)
    (3, "rt_sigqueueinfo");        (* 178 *)
    (2, "rt_sigsuspend");          (* 179 *)
    (6, "pread");                  (* 180 *)
    (6, "pwrite");                 (* 181 *)
    (3, "chown");                  (* 182 *)
    (2, "getcwd");                 (* 183 *)
    (2, "capget");                 (* 184 *)
    (2, "capset");                 (* 185 *)
    (2, "sigaltstack");            (* 186 *)
    (4, "sendfile");               (* 187 *)
    (5, "getpmsg");                (* 188 *)
    (5, "putpmsg");                (* 189 *)
    (0, "vfork");                  (* 190 *)
    (2, "getrlimit");              (* 191 *)
    (6, "mmap2");                  (* 192 *)
    (4, "truncate64");             (* 193 *)
    (4, "ftruncate64");            (* 194 *)
    (2, "stat64");                 (* 195 *)
    (2, "lstat64");                (* 196 *)
    (2, "fstat64");                (* 197 *)
    (3, "lchown32");               (* 198 *)
    (0, "getuid32");               (* 199 *)
    (0, "getgid32");               (* 200 *)
    (0, "geteuid32");              (* 201 *)
    (0, "getegid32");              (* 202 *)
    (2, "setreuid32");             (* 203 *)
    (2, "setregid32");             (* 204 *)
    (2, "getgroups32");            (* 205 *)
    (2, "setgroups32");            (* 206 *)
    (3, "fchown32");               (* 207 *)
    (3, "setresuid32");            (* 208 *)
    (3, "getresuid32");            (* 209 *)
    (3, "setresgid32");            (* 210 *)
    (3, "getresgid32");            (* 211 *)
    (3, "chown32");                (* 212 *)
    (1, "setuid32");               (* 213 *)
    (1, "setgid32");               (* 214 *)
    (1, "setfsuid32");             (* 215 *)
    (1, "setfsgid32");             (* 216 *)
    (3, "getdents64");             (* 217 *)
    (2, "pivot_root");             (* 218 *)
    (3, "mincore");                (* 219 *)
    (3, "madvise");                (* 220 *)
    (3, "fcntl64");                (* 221 *)
    (0, "gettid");                 (* 224 *)
    (5, "readahead");              (* 225 *)
    (5, "setxattr");               (* 226 *)
    (5, "lsetxattr");              (* 227 *)
    (5, "fsetxattr");              (* 228 *)
    (4, "getxattr");               (* 229 *)
    (4, "lgetxattr");              (* 230 *)
    (4, "fgetxattr");              (* 231 *)
    (3, "listxattr");              (* 232 *)
    (3, "llistxattr");             (* 233 *)
    (3, "flistxattr");             (* 234 *)
    (2, "removexattr");            (* 235 *)
    (2, "lremovexattr");           (* 236 *)
    (2, "fremovexattr");           (* 237 *)
    (2, "tkill");                  (* 238 *)
    (4, "sendfile64");             (* 239 *)
    (6, "futex");                  (* 240 *)
    (3, "sched_setaffinity");      (* 241 *)
    (3, "sched_getaffinity");      (* 242 *)
    (2, "io_setup");               (* 243 *)
    (1, "io_destroy");             (* 244 *)
    (5, "io_getevents");           (* 245 *)
    (3, "io_submit");              (* 246 *)
    (3, "io_cancel");              (* 247 *)
    (1, "exit_group");             (* 248 *)
    (4, "lookup_dcookie");         (* 249 *)
    (1, "epoll_create");           (* 250 *)
    (4, "epoll_ctl");              (* 251 *)
    (4, "epoll_wait");             (* 252 *)
    (5, "remap_file_pages");       (* 253 *)
    (1, "set_tid_address");        (* 256 *)
    (3, "timer_create");           (* 257 *)
    (4, "timer_settime");          (* 258 *)
    (2, "timer_gettime");          (* 259 *)
    (1, "timer_getoverrun");       (* 260 *)
    (1, "timer_delete");           (* 261 *)
    (2, "clock_settime");          (* 262 *)
    (2, "clock_gettime");          (* 263 *)
    (2, "clock_getres");           (* 264 *)
    (4, "clock_nanosleep");        (* 265 *)
    (3, "statfs64");               (* 266 *)
    (3, "fstatfs64");              (* 267 *)
    (3, "tgkill");                 (* 268 *)
    (2, "utimes");                 (* 269 *)
    (6, "fadvise64_64");           (* 270 *)
    (5, "pciconfig_iobase");       (* 271 *)
    (5, "pciconfig_read");         (* 272 *)
    (5, "pciconfig_write");        (* 273 *)
    (4, "mq_open");                (* 274 *)
    (1, "mq_unlink");              (* 275 *)
    (5, "mq_timedsend");           (* 276 *)
    (5, "mq_timedreceive");        (* 277 *)
    (2, "mq_notify");              (* 278 *)
    (3, "mq_getsetattr");          (* 279 *)
    (5, "waitid");                 (* 280 *)
    (3, "socket");                 (* 281 *)
    (3, "bind");                   (* 282 *)
    (3, "connect");                (* 283 *)
    (2, "listen");                 (* 284 *)
    (3, "accept");                 (* 285 *)
    (3, "getsockname");            (* 286 *)
    (3, "getpeername");            (* 287 *)
    (4, "socketpair");             (* 288 *)
    (4, "send");                   (* 289 *)
    (6, "sendto");                 (* 290 *)
    (4, "recv");                   (* 291 *)
    (6, "recvfrom");               (* 292 *)
    (2, "shutdown");               (* 293 *)
    (5, "setsockopt");             (* 294 *)
    (5, "getsockopt");             (* 295 *)
    (3, "sendmsg");                (* 296 *)
    (3, "recvmsg");                (* 297 *)
    (4, "semop");                  (* 298 *)
    (4, "semget");                 (* 299 *)
    (4, "semctl");                 (* 300 *)
    (4, "msgsnd");                 (* 301 *)
    (4, "msgrcv");                 (* 302 *)
    (4, "msgget");                 (* 303 *)
    (4, "msgctl");                 (* 304 *)
    (4, "shmat");                  (* 305 *)
    (4, "shmdt");                  (* 306 *)
    (4, "shmget");                 (* 307 *)
    (4, "shmctl");                 (* 308 *)
    (5, "add_key");                (* 309 *)
    (4, "request_key");            (* 310 *)
    (5, "keyctl");                 (* 311 *)
    (5, "semtimedop");             (* 312 *)
    (5, "vserver");                (* 313 *)
    (3, "ioprio_set");             (* 314 *)
    (2, "ioprio_get");             (* 315 *)
    (0, "inotify_init");           (* 316 *)
    (3, "inotify_add_watch");      (* 317 *)
    (2, "inotify_rm_watch");       (* 318 *)
    (6, "mbind");                  (* 319 *)
    (3, "set_mempolicy");          (* 320 *)
    (5, "get_mempolicy");          (* 321 *)
    (4, "openat");                 (* 322 *)
    (3, "mkdirat");                (* 323 *)
    (4, "mknodat");                (* 324 *)
    (5, "fchownat");               (* 325 *)
    (3, "futimesat");              (* 326 *)
    (4, "newfstatat");             (* 327 *)
    (3, "unlinkat");               (* 328 *)
    (4, "renameat");               (* 329 *)
    (5, "linkat");                 (* 330 *)
    (3, "symlinkat");              (* 331 *)
    (4, "readlinkat");             (* 332 *)
    (3, "fchmodat");               (* 333 *)
    (3, "faccessat");              (* 334 *)
    (6, "pselect6");               (* 335 *)
    (5, "ppoll");                  (* 336 *)
    (1, "unshare");                (* 337 *)
    (2, "set_robust_list");        (* 338 *)
    (3, "get_robust_list");        (* 339 *)
    (6, "splice");                 (* 340 *)
    (6, "sync_file_range2");       (* 341 *)
    (4, "tee");                    (* 342 *)
    (4, "vmsplice");               (* 343 *)
    (6, "move_pages");             (* 344 *)
    (3, "getcpu");                 (* 345 *)
    (6, "epoll_pwait");            (* 346 *)
    (4, "kexec_load");             (* 347 *)
    (4, "utimensat");              (* 348 *)
    (3, "signalfd");               (* 349 *)
    (4, "timerfd");                (* 350 *)
    (1, "eventfd");                (* 351 *)
    (6, "fallocate");              (* 352 *)
    (4, "timerfd_settime");        (* 353 *)
    (2, "timerfd_gettime");        (* 354 *)
    (4, "signalfd4");              (* 355 *)
    (2, "eventfd2");               (* 356 *)
    (1, "epoll_create1");          (* 357 *)
    (3, "dup3");                   (* 358 *)
    (2, "pipe2");                  (* 359 *)
    (1, "inotify_init1");          (* 360 *)
    (6, "preadv");                 (* 361 *)
    (6, "pwritev");                (* 362 *)
    (4, "rt_tgsigqueueinfo");      (* 363 *)
    (5, "perf_event_open");        (* 364 *)
    (5, "recvmmsg");               (* 365 *)
    (4, "accept4");                (* 366 *)
    (2, "fanotify_init");          (* 367 *)
    (5, "fanotify_mark");          (* 368 *)
    (4, "prlimit64");              (* 369 *)
    (5, "name_to_handle_at");      (* 370 *)
    (3, "open_by_handle_at");      (* 371 *)
    (2, "clock_adjtime");          (* 372 *)
    (1, "syncfs");                 (* 373 *)
    (4, "sendmmsg");               (* 374 *)
    (2, "setns");                  (* 375 *)
    (6, "process_vm_readv");       (* 376 *)
    (6, "process_vm_writev");      (* 377 *)
    (5, "kcmp");                   (* 378 *)
    (3, "finit_module");           (* 379 *)
  |]

class noop_linux_special_handler (fm : fragment_machine) =
object(self)
  method private handle_linux_syscall () =
    let get_reg_s r = 
      match !opt_arch with
	| (X86|ARM) -> fm#printable_word_reg r
	| X64 -> fm#printable_long_reg r
    in
    let get_reg_i r = 
      match !opt_arch with
	| (X86|ARM) -> fm#get_word_var_concretize r false "syscall num"
	| X64 -> fm#get_long_var_concretize r false "syscall num"
    in
    let (callnum_reg, arg_regs, ret_reg) = match !opt_arch with
      | X86 -> (R_EAX, [| R_EBX; R_ECX; R_EDX; R_ESI; R_EDI; R_EBP |], R_EAX)
      | ARM -> (R7, [| R0; R1; R2; R3; R4; R5; R6 |], R0)
      | X64 -> (R_RAX, [| R_RDI; R_RSI; R_RDX; R_R10; R_R8; R_R9 |], R_RAX)

    in
    let syscall_num = Int64.to_int (get_reg_i callnum_reg) in
    let rec read_regs n =
      match n with
	| 0 -> []
	| _ ->
	    (read_regs (n - 1)) @ [get_reg_s arg_regs.(n - 1)]
    in
    let put_reg_sym r s =
      match !opt_arch with
	| (X86|ARM) -> fm#set_word_reg_fresh_symbolic r s
	| X64 -> fm#set_long_reg_fresh_symbolic r s
    in
    let syscalls = match !opt_arch with
      | X86 -> syscalls_x86
      | X64 -> syscalls_x64
      | ARM -> syscalls_arm
    in
      if syscall_num < 0 || syscall_num >= Array.length syscalls then
	raise (UnhandledSysCall("Out of bounds syscall number"))
      else
	let (num_args, name) = syscalls.(syscall_num) in
	let args = read_regs num_args in
	  if !opt_trace_syscalls then
	    Printf.eprintf "%s(%s)" name (String.concat ", " args);
	  if name = "_exit" || name = "exit_group" then
	    let status = get_reg_i arg_regs.(0) in
	      Printf.eprintf "\n";
	      raise (SimulatedExit(status))
	  else
	    let res = put_reg_sym ret_reg "syscall_result" in
	      Printf.eprintf " = %s\n" res

  method handle_special str =
    let handle () =
      self#handle_linux_syscall ()
    in
      match str with
	| "int 0x80" ->
            handle();
            Some []
	| "syscall" -> (* e.g., ARM, x64 *)
            handle();
            Some []
	| "sysenter" ->
            let sysenter_eip = fm#get_word_var R_EIP in
            let sysexit_eip = (Int64.logor 0x430L
                                 (Int64.logand 0xfffff000L sysenter_eip)) in
            let label = "pc_0x" ^ (Printf.sprintf "%08Lx" sysexit_eip) in
              handle();
              Some [V.Jmp(V.Name(label))]
	| _ -> None

  (* This class is stateless so these are also no-ops: *)
  method make_snap = ()
  method reset = ()
  method state_json : Yojson.Safe.json option = None
end
